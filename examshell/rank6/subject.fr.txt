Assignment name  : mini_serv
Expected files   : mini_serv.c
Allowed functions: write, close, select, socket, accept, listen, send, recv, bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen, exit, strcpy, strcat, memset
--------------------------------------------------------------------------------


Écrivez un programme qui écoutera le client pour se connecter sur un certain port sur 127.0.0.1 et permettra aux clients de parler entre eux

Ce programme prendra comme premier argument le port auquel se lier
Si aucun argument n'est donné, il doit écrire dans stderr "Wrong number of arguments" suivi d'un \n et sortir avec le statut 1
Si un appel système renvoie une erreur avant que le programme ne commence à accepter la connexion, il doit écrire dans stderr "Fatal error" suivi d'un \n et quitter avec le statut 1
Si vous ne pouvez pas allouer de mémoire, il doit écrire dans stderr "Fatal error" suivi d'un \n et quitter avec le statut 1

Votre programme doit être non bloquant mais le client peut être paresseux et s'il ne lit pas votre message, vous ne devez PAS le déconnecter...

Votre programme ne doit pas contenir de #define preproc
Votre programme ne doit écouter que 127.0.0.1
Le fd que vous recevrez sera déjà configuré pour bloquer 'recv' ou 'send' si select n'a pas été appelé avant de les appeler, mais ne bloquera pas autrement.

Lorsqu'un client se connecte au serveur :
- le client recevra un identifiant. le premier client recevra l'identifiant 0 et chaque nouveau client recevra le dernier identifiant client + 1
- %d sera remplacé par ce numéro
- un message est envoyé à tous les clients qui étaient connectés au serveur : "server: client %d just arrived\n"

les clients doivent pouvoir envoyer des messages à votre programme.
- le message ne sera que des caractères imprimables, pas besoin de vérifier
- un même message peut contenir plusieurs \n
- lorsque le serveur reçoit un message, il doit le renvoyer à tous les autres clients avec "client %d: " avant chaque ligne !

Lorsqu'un client se déconnecte du serveur :
- un message est envoyé à tous les clients qui étaient connectés au serveur : "server: client %d just left\n"

Les fuites de mémoire ou fd sont interdites

Pour vous aider, vous trouverez le fichier main.c avec le début d'un serveur et peut-être quelques fonctions utiles. (Attention, ce fichier utilise des fonctions interdites ou écrit des choses qui ne doivent pas être là dans votre programme final)

Attention notre testeur s'attend à ce que vous envoyiez les messages aussi vite que possible. Ne faites pas de tampon inutile.

L'évaluation peut être un peu plus longue que d'habitude...

Astuce : vous pouvez utiliser nc pour tester votre programme
Astuce : vous devez utiliser nc pour tester votre programme
Astuce : pour tester, vous pouvez utiliser fcntl(fd, F_SETFL, O_NONBLOCK) mais utilisez select et ne cochez JAMAIS EAGAIN (man 2 send)